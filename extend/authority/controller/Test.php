<?php
/**
 * 功能测试
 * User: keepwin100
 * Date: 2019-04-27
 * Time: 18:42
 */
namespace authority\controller;

use authority\Model\AuthRule;
use authority\service\SuperRbacService;
use authority\traits\Authentication;
use core\controller\Base;
use core\exception\CoreException;
use core\includes\session\SessionManagement;
use core\model\Role;
use core\model\User;
use core\service\UserService;

abstract class Test extends Base
{
    use Authentication;
    /**
     * @var UserService
     */
    protected  $usersService;
    /**
     * @var SuperRbacService
     */
    protected  $authService;

    /**
     * @throws CoreException
     */
    public function _initialize()
    {
        $this->authService = SuperRbacService::singleton();
        $this->usersService = UserService::singleton();
        if(!$this->verification()){
            throw new CoreException(REQUEST_DENY);
        }
        parent::_initialize(); // TODO: Change the autogenerated stub
    }

    /**
     *
     */
    #添加用户
    public function addUser()
    {
        $username = $this->request->param("username");
        $password = $this->request->param("password");
        $mobile = $this->request->param("mobile");
        $role_id = $this->request->param("role_id");
        $nickname = $this->request->param("nickname");

        $role = null;
        $role = ($role_id)?Role::get($role_id):null;//指定角色 如果需要
        $user =$this->usersService->addUser([
            "username"=>$username,
            "passwd"=>$password,
            "mobile"=>$mobile,
            "nickname"=>$nickname,
            "type"=>1
        ],$role);

        $this->result($user->visible(["username","nickname","mobile"])->toArray());
    }

    /**
     * 修改用户
     */
    public function modifyUser()
    {
        $user_id = $this->request->param("uid");
        $username = $this->request->param("username");
        $password = $this->request->param("password");
        $mobile = $this->request->param("mobile");
        $role_id = $this->request->param("role_id");
        $nickname = $this->request->param("nickname");
        $role = null;
        $role = ($role_id)?Role::get($role_id):null;//指定角色 如果需要
        $user = User::get($user_id);
        if(empty($user)){
            $this->result("No User for this uid '{$user_id}' ",PARAM_ERROR);
        }
        $user =$this->usersService->modifyUser($user,[
            "username"=>$username,
            "passwd"=>$password,
            "mobile"=>$mobile,
            "nickname"=>$nickname
        ],$role);

        $this->result($user->visible(["username","nickname","mobile"])->toArray());
    }


    /**
     * 删除用户
     * 1.解除与角色的绑定
     * 2.数据库本尊删除
     */
    public function removeUser()
    {
        $result = 0;
        $userid = $this->request->param("uid");
        $user = User::get($userid);
        if(!empty($user)){
             $result = $this->usersService->removeUser(User::get($userid));
        }
        #删除了一个不存在的uid
        if($result){
            $this->result("success",0);
        }
        $this->result("success",USER_DELETE_FAILED);
    }

    /**
     * 添加角色
     */
     public function addRole()
     {
         $currentUser = SessionManagement::getSession()->getUser();
         $title= $this->request->param("title");
         $remark = $this->request->param("remark");
         $rule_ids = $this->request->param("rule_ids");
         if(strpos($rule_ids,",")){
             $rule_ids = explode(",",$rule_ids);
         }
         $role = $this->usersService->addRole($title,$remark,$currentUser->getUserPropertyValues("eid"));
         //授权
         foreach ($rule_ids as $rule_id){
             $rule = AuthRule::get($rule_id);
             if(!$this->authService->hasRule($currentUser->getRoles()[0],$rule)){
                 throw new CoreException(ILLEGAL_REQUEST,"无法越权操作");
             }
             $this->authService->bindRole($rule,$role);
         }
         $this->result($role->toArray());
     }


    public function attachRole()
    {
        $user = User::get(8);
        $role = Role::get(2);

        $this->usersService->attachRole($user,$role);

    }




    public function addRule()
    {
        $actions = $this->request->param("action");
        $ruleName = $this->request->param("rule_name");


    }



}